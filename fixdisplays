#!/bin/env python
"""Control which screens are used.

Usage:
    fixdisplays [options]

Options:
    -l, --laptop     enable built-in screen, disable all others.
    -d, --desktop    enable external monitors, disable all others.
    -p, --projector  enable external VGA projector along with built-in screen.
    -s, --swap       swap the displays
    -v, --verbose    narrate the changes
"""

# Imports {{{1
from scripts import Sh, ScriptError, sh, script_prefs
script_prefs(exit_upon_error = False)
import docopt
import sys

# Constants {{{1
LAPTOP_PREFIX = 'LVDS'
DESKTOP_PREFIX = 'DP'
PROJECTOR_PREFIX = 'VGA'

# use 'pactl list' to determine names of audio sinks                             
# # set to None if it setting the default audio sink is not desired                
EXTERNAL_AUDIO_SINK = 'alsa_output.usb-0d8c_C-Media_USB_Audio_Device-00-Device.analog-stereo'
INTERNAL_AUDIO_SINK = 'alsa_output.pci-0000_00_1b.0.analog-stereo' 

# Configuration class {{{1
class Configuration:
    # __init__() {{{2
    def __init__(self, available_displays, unavailable_displays):
        self.xrandr_cmd = ['xrandr']
        self.available_displays = available_displays

        # configure the displays
        if not self.is_suitable():
            sys.exit('Displays not available to support %s configuration.' % (
                self.__class__.__name__.lower()
            ))

        # disable those displays that are not present
        #for display in unavailable_displays:
        #    self.disable_display(display)

        if cmdline['--verbose']:
            print('Available displays:', ', '.join(available_displays))
            print('Unavailable displays:', ', '.join(unavailable_displays))

    # disable_unneeded() {{{2
    def disable_unneeded(self, use):
        for display in self.available_displays:
            if display not in use:
                if cmdline['--verbose']:
                    print('Disable display:', display)
                self.xrandr_cmd += ['--output', display, '--off']

    # enable_needed() {{{2
    def enable_needed(self, use):
        for display in use:
            if cmdline['--verbose']:
                print('Enable display:', display)
            self.xrandr_cmd += ['--output', display, '--auto']

    # primary_display() {{{2
    def primary_display(self, display):
        if cmdline['--verbose']:
            print('Primary display:', display)
        self.xrandr_cmd += ['--output', display, '--primary']

    # arrange_displays() {{{2
    def arrange_displays(self, screens):
        if len(screens) == 2:
            if cmdline['--verbose']:
                print('Arrange displays:', ', '.join([left, right]))
            if cmdline['--swap']:
                right, left = screens
            else:
                left, right = screens
            self.xrandr_cmd += ['--output', left, '--right-of', right]
        else:
            assert len(screens) <= 2
            assert len(screens) >= 1

    # run_xrandr() {{{2
    def run_xrandr(self):
        try:
            if cmdline['--verbose']:
                print('RUNNING:', ' '.join(self.xrandr_cmd))
            Sh(self.xrandr_cmd)
        except ScriptError as exception:
            print('Could not configure display with xrandr: %s' % exception)

    # set_default_sound_sink() {{{2
    def set_default_sound_sink(self, sink):
        try:
            if cmdline['--verbose']:
                print('Set default sound sink: %s' % sink)
            Sh('pactl set-default-sink %s' % sink)
        except ScriptError:
            print('Could not set default sound sink: %s' % sink)

# define known configurations
# known configuration -- laptop without projector {{{1
class Laptop(Configuration):
    @classmethod
    def is_suitable(cls):
        return bool(laptop_screens)

    def configure(self):
        use = laptop_screens[0:1]
        print('Configuring laptop screen:', ', '.join(use))
        self.disable_unneeded(use)
        self.enable_needed(use)
        self.primary_display(use[0])
        self.run_xrandr()
        self.set_default_sound_sink(INTERNAL_AUDIO_SINK)

# known configuration -- home desk {{{1
class Desktop(Configuration):
    @classmethod
    def is_suitable(cls):
        return bool(desktop_screens)

    def configure(self):
        use = desktop_screens[0:2]
        print('Configuring desktop screens:', ', '.join(use))
        self.disable_unneeded(use)
        self.enable_needed(use)
        self.primary_display(use[0])
        self.arrange_displays(use)
        self.run_xrandr()
        self.set_default_sound_sink(EXTERNAL_AUDIO_SINK)

# known configuration -- laptop with projector {{{1
class Projector(Configuration):
    @classmethod
    def is_suitable(cls):
        return bool(projectors)

    def configure(self):
        use = [laptop_screens[0], projectors[0]]
        print('Configuring laptop screen with projector:', ', '.join(use))
        self.disable_unneeded(use)
        self.enable_needed(use)
        self.primary_display(laptop_screens[0])
        self.arrange_displays(use)
        self.run_xrandr()
        self.set_default_sound_sink(INTERNAL_AUDIO_SINK)

# unknown configuration -- just turn on all available displays {{{1
class Available(Configuration):
    @classmethod
    def is_suitable(cls):
        return bool(available_displays)

    def configure(self):
        print(
            'Unknown configuration, enabling all available screens:',
            ', '.join(self.available_displays)
        )
        # enable those displays that are present
        self.enable_display(self.available_displays)
        self.run_xrandr()
        sys.exit()

# Main {{{1
def reset_keyboard():
    sh('r')

try:
    cmdline = docopt.docopt(__doc__)
    reset_keyboard()

    # determine which displays are present and which are not
    xrandr = Sh(['xrandr', '--query'], modes='OeW')
    available_displays = set()
    unavailable_displays = set()
    for line in xrandr.stdout.split('\n'):
        words = line.split()
        if len(words) >= 2:
            if words[1] == 'connected':
                available_displays.add(words[0])
            elif words[1] == 'disconnected':
                unavailable_displays.add(words[0])

    laptop_screens = []
    desktop_screens = []
    projectors = []
    for display in sorted(available_displays):
        if display.startswith(LAPTOP_PREFIX):
            laptop_screens.append(display)
        elif display.startswith(DESKTOP_PREFIX):
            desktop_screens.append(display)
        elif display.startswith(PROJECTOR_PREFIX):
            projectors.append(display)
        else:
            print('%s: unknown display type' % display)

    # identify configuration and activate it
    if cmdline['--laptop']:
        configuration = Laptop(available_displays, unavailable_displays)
    elif cmdline['--desktop']:
        configuration = Desktop(available_displays, unavailable_displays)
    elif cmdline['--projector']:
        configuration = Projector(available_displays, unavailable_displays)
    elif Desktop.is_suitable():
        configuration = Desktop(available_displays, unavailable_displays)
    elif Projector.is_suitable():
        configuration = Projector(available_displays, unavailable_displays)
    elif Laptop.is_suitable():
        configuration = Laptop(available_displays, unavailable_displays)
    else:
        configuration = Available(available_displays, unavailable_displays)
    configuration.configure()

except ScriptError as error:
    sys.exit(str(error))
except KeyboardInterrupt:
    sys.exit('Killed by user.')
