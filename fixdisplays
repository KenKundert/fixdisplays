#!/usr/bin/env python3
# Partition available displays into three types: builtin, external, and
# projectors. Predefine sets of displays that can then be configured for use.
# Modify the code to change the predefined configurations. Use command line to
# select which predefined configuration should be used.
#
# When run, configures desired set of displays. Also sets the default audio
# sink.

"""Control which screens are used.

Usage:
    fixdisplays [options]

Options:
    -l, --laptop     enable built-in screen, disable all others.
    -d, --desktop    enable external monitors, disable all others.
    -p, --projector  enable external VGA projector along with built-in screen.
    -t, --trialrun   describe what would be done rather than doing it
"""

import scripts
import docopt

# use 'pactl list' to determine names of audio sinks
# set to None if it setting the default audio sink is not desired
external_audio_sink = 'alsa_output.usb-0d8c_C-Media_USB_Audio_Device-00-Device.analog-stereo'
internal_audio_sink = 'alsa_output.pci-0000_00_1b.0.analog-stereo'

# cleanup_cmd will be run after displays are configure, set to None to skip
cleanup_cmd = None # 'r'

def run(cmd, debug):
    if debug:
        print('RUN:', ' '.join(cmd))
    else:
        try:
            scripts.run(cmd)
        except scripts.ScriptError as error:
            print("fixdisplays: '%s' found when running:" % str(error))
            print("   ", ' '.join(cmd))

class Display:
    def __init__(self, name):
        self.name = name
        components = name.split('-')
        if len(components) == 3:
            self.kind = components[0]
            self.card = components[1]
            self.output = components[2]
        elif len(components) == 2:
            self.kind = components[0]
            self.card = '0'
            self.output = components[1]
        else:
            self.kind = name.strip('0123456789')
            self.card = '0'
            self.output = name[len(self.kind):]

    def __repr__(self):
        return ':'.join([self.kind, self.card, self.output])

    def __str__(self):
        return self.name

class Displays:
    def __init__(self, debug):
        self.debug = debug

        # find available displays
        self.available = set()
        xrandr = scripts.Run(['xrandr', '--query'], modes='sOeW0')
        self.active_displays = 0
        for line in xrandr.stdout.split('\n'):
            if '*+' in line:
                self.active_displays += 1
            words = line.split()
            if len(words) >= 2 and words[1] == 'connected':
                self.available.add(Display(words[0]))
        self.builtin = sorted([d.name for d in self.available if d.kind in ['LVDS']])
        self.external = sorted([d.name for d in self.available if d.kind in ['DP']], reverse=True)
        self.projector = sorted([d.name for d in self.available if d.kind in ['VGA']])
        assert len(self.available) == (len(self.builtin) + len(self.external) + len(self.projector))
        if debug:
            print('Built in:', ', '.join(self.builtin))
            print('External:', ', '.join(self.external))
            print('Projector:', ', '.join(self.projector))
            print('Currently Active:', self.active_displays)

    def _configure(self, use, dont, sink):
        # run xrandr to configure displays
        xrandr_cmd = ['xrandr']
        for i, display in enumerate(use):
            xrandr_cmd += ['--output', display, '--auto']
            if i:
                xrandr_cmd += ['--right-of', use[i-1]]
        for display in dont:
            xrandr_cmd += ['--output', display, '--off']
        run(xrandr_cmd, self.debug)

        # run pactl to configure default sink
        if sink:
            pactl_cmd = ['pactl', 'set-default-sink', sink]
            run(pactl_cmd, self.debug)
        return True

    def configure_dual_external_monitors(self):
        # activate the first two external monitors, deactivate all others
        if len(self.external) >= 2:
            use = self.external[0:2]
            dont = self.external[2:] + self.builtin + self.projector
            sink = external_audio_sink
            return self._configure(use, dont, sink)
        if self.debug:
            print('dual external monitor configuration is not available')
        return False
    
    def configure_builtin_and_projector(self):
        # activate the first built-in display and first projector
        # deactivate any others
        if len(self.builtin) >= 1 and len(self.projector) >= 1:
            use = [self.builtin[0], self.projector[0]]
            dont = self.external + self.builtin[1:] + self.projector[1:]
            sink = internal_audio_sink
            return self._configure(use, dont, sink)
        if self.debug:
            print('built-in and projector display configuration is not available')
        return False
    
    def configure_builtin(self):
        # activate the first built-in display, deactivate any others
        if len(self.builtin) >= 1:
            use = [self.builtin[0]]
            dont = self.external + self.builtin[1:] + self.projector
            sink = internal_audio_sink
            return self._configure(use, dont, sink)
        if self.debug:
            print('built-in display configuration is not available')
        return False

    def configure_default(self):
        # consider the available configurations in order of preference
        # stop after the first one that works
        result = self.configure_dual_external_monitors()
        if result:
            return result
        result = self.configure_builtin_and_projector()
        if result:
            return result
        return configure_builtin()
    
# initialization
scripts.script_prefs(exit_upon_error=False, show_cmd_in_errors=False)

# read command line
cmdline = docopt.docopt(__doc__)

# determine which displays are available
displays = Displays(cmdline['--trialrun'])

# configure displays as requested by the user
if cmdline['--laptop']:
    displays.configure_builtin()
elif cmdline['--desktop']:
    displays.configure_dual_external_monitors()
elif cmdline['--projector']:
    displays.configure_builtin_and_projector()
else:
    displays.configure_default()

# run clean up command if available
if cleanup_cmd:
    run([cleanup_cmd], cmdline['--trialrun'])
