#!/bin/env python3
"""Control which screens are used.

Usage:
    fixdisplays [options]
    fixdisplays [options] l|laptop
    fixdisplays [options] d|desktop
    fixdisplays [options] p|projector
    fixdisplays [options] s|same

Options:
    -s, --swap       swap the displays
    -n, --narrate    narrate the changes
    -q, --quiet      suppress all messages except for error messages

The available configurations are:
    l, laptop        enable built-in screen, disable all others.
    d, desktop       enable external monitors, disable all others.
    p, projector     enable external VGA projector along with built-in screen.
    s, same          make external VGA projector the same as builtin screen.
"""

# Imports {{{1
from inform import (
    Inform, codicil, conjoin, done, display, error, fatal, narrate, plural,
    os_error, terminate
)
from shlib import rm, Run, to_path
import docopt
from textwrap import dedent

# Constants {{{1
LAPTOP_PREFIX = 'LVDS'
DESKTOP_PREFIX = 'DP'
PROJECTOR_PREFIX = 'VGA'
SOUND_SINKS = dict(
    #external = 'alsa_output.usb',
    #internal = 'alsa_output.pci',
    external = 'C-Media USB Audio Device',
    internal = 'HDA Intel PCH',
)
RESET_KEYBOARD = 'reset'
RESET_KEYBOARD = 'r'  # this is a script I use, you should delete this line
VOL_CONTROL_CMD = '~/bin/vol'
    # if set, a script that can be used to control the volume of the active 
    # sound card is created


# Configuration class {{{1
class Configuration:
    # __init__() {{{2
    def __init__(self, available_screens, unavailable_screens):
        self.available_screens = available_screens
        self.screens = {}

        narrate(
            f'Available {plural(available_screens):screen/s}:',
            conjoin(available_screens)
        )
        narrate(
            f'Unavailable {plural(unavailable_screens):screen/s}:',
            conjoin(unavailable_screens)
        )

        # configure the screens
        if not self.is_suitable():
            fatal('Displays not available to support %s configuration.' % (
                self.__class__.__name__.lower()
            ))

        # disable those screens that are not present
        #for screen in unavailable_screens:
        #    self.disable_screen(screen)

    # enable_needed() {{{2
    def enable_needed(self, use):
        for screen in self.available_screens:
            if screen in use:
                narrate('Enable screen:', screen)
                self.screens[screen] = ['--auto']
            else:
                narrate('Disable screen:', screen)
                self.screens[screen] = ['--off']

    # primary_screen() {{{2
    def primary_screen(self, screen):
        # For i3 the primary display designates where the tray icons are shown
        # (assure tray_output is set to primary in i3bar settings (in i3 config)
        narrate('Primary screen:', screen)
        self.screens[screen] += ['--primary']

    # arrange_screens() {{{2
    def arrange_screens(self, screens, same=False):
        if len(screens) == 2:
            if cmdline['--swap']:
                right, left = screens
            else:
                left, right = screens
            narrate('Arrange screens:', ', '.join([left, right]))
            if same:
                self.screens[left] += ['--same-as', right]
                display('%s same as %s.' % (right, left))
            elif True or cmdline['--vertical']:
                self.screens[left] += ['--below', right]
                display('%s above %s.' % (right, left))
            else:
                self.screens[left] += ['--left-of', right]
                display('%s left of %s.' % (left, right))
        else:
            assert len(screens) <= 2
            assert len(screens) >= 1
            display(screens[0])

    # run_xrandr() {{{2
    def run_xrandr(self):
        try:
            xrandr_cmd = 'xrandr --auto'.split()
                # the --auto causes xrandr to start in a reasonable state
                # specifically it will disable screens that are no longer available
            for screen in sorted(self.screens.keys(), key=lambda s: len(self.screens[s])):
                xrandr_cmd += ['--output', screen] + self.screens[screen]
            narrate('running:', ' '.join(xrandr_cmd))
            Run(xrandr_cmd, 'sOEW')
        except OSError as e:
            error('Could not configure screen with xrandr: %s' % os_error(e))

    # set_default_sound_sink() {{{2
    def set_default_sound_sink(self, sink):
        pa_sinks = {}
        alsa_sinks = {}
        try:
            # get list of sound sinks
            pactl = Run('pacmd list-sinks', modes='sOeW1')
            name = alsa_card = matches = None
            for line in reversed(pactl.stdout.split('\n')):
                if 'name: ' in line:
                    name = line.split()[-1]
                    if name[0] == '<':
                        name = name[1:-1]
                if 'alsa.card = ' in line:
                    alsa_card = line.split()[-1]
                    if alsa_card[0] == '"':
                        alsa_card = alsa_card[1:-1]
                for k, v in SOUND_SINKS.items():
                    if v in line:
                        matches = k
                if 'index: ' in line:
                    index = line.split()[-1]
                    if matches:
                        if name:
                            pa_sinks[matches] = name
                        if alsa_card:
                            alsa_sinks[matches] = alsa_card

            if sink in pa_sinks:
                narrate(f'Set default sound sink: {sink}')
                card = pa_sinks[sink]
                pactl_cmd = ['pactl', 'set-default-sink', card]
                narrate('running:', ' '.join(pactl_cmd))
                Run(pactl_cmd, 'soeW')
            if VOL_CONTROL_CMD:
                if sink in alsa_sinks:
                    narrate(f'Creating volume controller: {VOL_CONTROL_CMD}')
                    path = to_path(VOL_CONTROL_CMD)
                    path.write_text(dedent(f'''
                        #!/bin/sh
                        # adjust the volume of the sound card
                        # this file is automatically generated by fixdisplays
                        # to adjust to the currently active sound card
                        # j/k change the volume, Esc quits

                        alsamixer --card={alsa_sinks[sink]} --view=playback
                    ''').lstrip())
                    path.chmod(0o755)
                else:
                    narrate(f'Deleting volume controller: {VOL_CONTROL_CMD}')
                    rm(VOL_CONTROL_CMD)
        except OSError as e:
            error(f'Could not set default sound sink: {sink}')
            codicil(os_error(e))

# define known configurations
# known configuration -- laptop without projector {{{1
class Laptop(Configuration):
    @classmethod
    def is_suitable(cls):
        return bool(laptop_screens)

    def configure(self):
        use = laptop_screens[0:1]
        display('Configuring laptop: ', end='')
        self.enable_needed(use)
        self.primary_screen(use[0])
        self.arrange_screens(use)
        self.run_xrandr()
        self.set_default_sound_sink('internal')

# known configuration -- home desk {{{1
class Desktop(Configuration):
    @classmethod
    def is_suitable(cls):
        return bool(desktop_screens)

    def configure(self):
        use = desktop_screens[0:2]
        display('Configuring desktop: ', end='')
        self.enable_needed(use)
        self.primary_screen(use[0])
        self.arrange_screens(use)
        self.run_xrandr()
        self.set_default_sound_sink('external')

# known configuration -- laptop with projector {{{1
class Projector(Configuration):
    @classmethod
    def is_suitable(cls):
        return bool(projectors)

    def configure(self):
        use = [laptop_screens[0], projectors[0]]
        display('Configuring laptop with projector: ', end='')
        self.enable_needed(use)
        self.primary_screen(laptop_screens[0])
        self.arrange_screens(use)
        self.run_xrandr()
        self.set_default_sound_sink('external')

# known configuration -- laptop same as projector {{{1
class Same(Configuration):
    @classmethod
    def is_suitable(cls):
        return bool(projectors)

    def configure(self):
        use = [laptop_screens[0], projectors[0]]
        display('Configuring laptop with projector: ', end='')
        self.enable_needed(use)
        self.primary_screen(laptop_screens[0])
        self.arrange_screens(use, True)
        self.run_xrandr()
        self.set_default_sound_sink('external')

# unknown configuration -- just turn on all available screens {{{1
class Available(Configuration):
    @classmethod
    def is_suitable(cls):
        return bool(available_screens)

    def configure(self):
        display(
            'Unknown configuration, enabling all available screens:',
            conjoin(self.available_screens)
        )
        # enable those screens that are present
        self.enable_screen(self.available_screens)
        self.run_xrandr()
        done

# Main {{{1
def reset_keyboard():
    if RESET_KEYBOARD:
        narrate('Reset keyboard.')
        Run(RESET_KEYBOARD, 'soeW')

try:
    cmdline = docopt.docopt(__doc__)
    Inform(
        quiet=cmdline['--quiet'],
        narrate=cmdline['--narrate'],
        logfile = to_path('~/.fixdisplays.log'),
        flush = True,
    )
    reset_keyboard()


    # determine which screens are present and which are not
    narrate('Query screens.')
    xrandr = Run(['xrandr', '--query'], modes='sOeW')
    narrate('Identify screens.')
    available_screens = set()
    unavailable_screens = set()
    for line in xrandr.stdout.split('\n'):
        words = line.split()
        if len(words) >= 2:
            if words[1] == 'connected':
                available_screens.add(words[0])
            elif words[1] == 'disconnected':
                unavailable_screens.add(words[0])

    # identify the type of each available screen
    laptop_screens = []
    desktop_screens = []
    projectors = []
    for screen in sorted(available_screens):
        if screen.startswith(LAPTOP_PREFIX):
            laptop_screens.append(screen)
        elif screen.startswith(DESKTOP_PREFIX):
            desktop_screens.append(screen)
        elif screen.startswith(PROJECTOR_PREFIX):
            projectors.append(screen)
        else:
            error('%s: unknown screen type' % screen)

    # identify configuration and activate it
    if cmdline['laptop'] or cmdline['l']:
        configuration = Laptop(available_screens, unavailable_screens)
    elif cmdline['desktop'] or cmdline['d']:
        configuration = Desktop(available_screens, unavailable_screens)
    elif cmdline['projector'] or cmdline['p']:
        configuration = Projector(available_screens, unavailable_screens)
    elif cmdline['same'] or cmdline['s']:
        configuration = Same(available_screens, unavailable_screens)
    elif Desktop.is_suitable():
        configuration = Desktop(available_screens, unavailable_screens)
    elif Projector.is_suitable():
        configuration = Projector(available_screens, unavailable_screens)
    elif Laptop.is_suitable():
        configuration = Laptop(available_screens, unavailable_screens)
    else:
        configuration = Available(available_screens, unavailable_screens)
    configuration.configure()

except OSError as e:
    fatal(e)
except KeyboardInterrupt:
    display('Killed by user.')
terminate()
